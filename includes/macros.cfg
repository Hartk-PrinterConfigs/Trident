#########################
#### BASE_MACROS.CFG ####
#########################

##### Variables #####
[gcode_macro MACROS_VARS]
variable_circ_fan_speed:        255
variable_probe_temp:            150
variable_extruder_temp:         265
variable_starting_wled:           2
variable_heating_wled:            4
variable_ending_wled:             3
variable_ending_length:          25
variable_purge_length:           40
variable_prepurge_length:        60
variable_filament_swap_length:  0.8
variable_pla_pa:             0.0345
variable_pet_pa:             0.0345
variable_abs_pa:             0.02
variable_pet_za:              0.010
variable_pla_za:              -0.0
variable_move_away_home:         10
variable_purge_retries:           5
variable_current_purge_retries:   0
variable_purge_flow_rate:         20
variable_fast: 1.0	# Fan speed once bed temp is reached  
variable_slow: 0.2	
gcode:


[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
 {% if printer.z_tilt.applied|lower == 'false' %} 
  _Z_TILT_ADJUST horizontal_move_z=10 retries=0 retry_tolerance=1.000
  {% endif %}
  _Z_TILT_ADJUST horizontal_move_z=3
  G28 Z
[gcode_macro DISPLAYTEXT]
gcode:
    {% set TEXT = params.TEXT|default("")|string %} 
    RESPOND MSG="{TEXT}"
    SET_DISPLAY_TEXT MSG="{TEXT}"

[gcode_macro MATERIAL_PA]
gcode:
    {% set MATERIAL = params.MATERIAL|default("XXX")|string %}
    {% set TEXT ="Setting PA for " + MATERIAL %}
    {% set PLA = printer["gcode_macro MACROS_VARS"].pla_pa|default(0)%}
    {% set PET = printer["gcode_macro MACROS_VARS"].pet_pa|default(0)%}
    {% set ABS = printer["gcode_macro MACROS_VARS"].abs_pa|default(0)%}
    {% set PETZ = printer["gcode_macro MACROS_VARS"].pet_za|default(0)%}
    {% set PLAZ = printer["gcode_macro MACROS_VARS"].pla_za|default(0)%}
    
    {% if MATERIAL == "PLA" %}
    SET_PRESSURE_ADVANCE ADVANCE={PLA}
    SET_GCODE_OFFSET Z_ADJUST={PLAZ} MOVE=1
    {% elif MATERIAL == "PET" %}
    SET_PRESSURE_ADVANCE ADVANCE={PET}
    SET_GCODE_OFFSET Z_ADJUST={PETZ} MOVE=1
    {% elif MATERIAL == "ABS" %}
    SET_PRESSURE_ADVANCE ADVANCE={ABS}
    {% else %}
       {% set TEXT ="No PA value for " + MATERIAL %}
    {% endif %}
    DISPLAYTEXT TEXT="{TEXT}"

[gcode_macro M600]
gcode:
     {% set th = printer.toolhead %}
     {% set TEXT = "Change Filament"|string %}
     {% set FSL = printer["gcode_macro MACROS_VARS"].filament_swap_length|default(0)%}

     DISPLAYTEXT TEXT="{TEXT}"
     PAUSE
     RELATIVE_COORDINATES
     G1 E-{FSL} F2700
     G1 Z30
     ABSOLUTE_COORDINATES
     G1 X{th.axis_maximum.x//2} Y10 F3000

[gcode_macro CHANGE_NOZZLE]
gcode:
     {% set th = printer.toolhead %}
     {% set TEXT = "Change Nozzle"|string %}
     DISPLAYTEXT TEXT="{TEXT}"
     CHOME
     G0 X{th.axis_maximum.x//2} Y2 Z100
 
[gcode_macro SET_TEMP]
gcode:
    {% set HEATER = params.HEATER|default("")|string %}
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set WAIT = params.WAIT|default(0)|int %}

    {% if HEATER == "extruder" %}
      {% if WAIT == 1 %}
        M109 S{TEMP}
      {% else %}
        M104 S{TEMP}
      {% endif %}
    {% else %}
     {% if WAIT == 1 %}
        M190 S{TEMP}
      {% else %}
        M140 S{TEMP}
      {% endif %}
    {% endif %}

[gcode_macro SET_FAN]
gcode:
    {% set SPEED = params.SPEED|default(0)|int %}
    {% if SPEED == 0 %}
    M107
    {% else %}
    M106 S{SPEED}
    {% endif %}
 
[gcode_macro TEMPERATURE_WAIT]
rename_existing: _TEMPERATURE_WAIT
gcode:
    {% set SENSOR = params.SENSOR|default("")|string %}
    {% set MINIMUM = params.MINIMUM|int %}
    {% set MSG = SENSOR + "temperature has reached " + MINIMUM |string %}
    DISPLAYTEXT TEXT="Heatsoaking, Please wait.."
    _TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} 
    DISPLAYTEXT TEXT="{MSG}"

[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    DISPLAYTEXT TEXT="Turning off heaters"
    _TURN_OFF_HEATERS 
    DISPLAYTEXT TEXT="Heaters turned off"

[gcode_macro DISABLE_MOTORS]
gcode:
   M84

[gcode_macro RESET_EXTRUDER]
gcode:
    DISPLAYTEXT TEXT="Resetting Extruder"
    G92 E0 ; reset extruder
    DISPLAYTEXT TEXT="Extruder Reset"


# [gcode_macro PARK]
# gcode:
#     #SMART_PARK
#    # {% set th = printer.toolhead %}
#     #ABSOLUTE_COORDINATES
#     DISPLAYTEXT TEXT="Parking"
#     SMART_PARK
# #G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  
#     DISPLAYTEXT TEXT="Parked"

[gcode_macro HOME_Z_AFTER_ZTILT]
gcode:
    DISPLAYTEXT TEXT="Homing Z"
    G28 Z


[gcode_macro PARK_AT_PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set y_move = printer["gcode_macro MACROS_VARS"].move_away_home|default(0)%}
   

    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - y_move + 5} F3600  ; park nozzle at rear center
    

# [gcode_macro PURGE]
# gcode:    
#      #{% set EXTRUDE = printer["gcode_macro MACROS_VARS"].ending_length|default(0)%}
#      #{% set PURGE = printer["gcode_macro MACROS_VARS"].purge_length|default(0)%}
#      DISPLAYTEXT TEXT="Purging"
#    #  RESET_EXTRUDER
#    #  G1 X55 Y3 Z0.85 F12000;
#     # G1 E{EXTRUDE} F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
#    #  G1 X75 Y3 E{PURGE} F100;
#     # G1 X80 F18000;
#      VORON_PURGE
#      DISPLAYTEXT TEXT="Purged"

[gcode_macro ENDING_RETRACTION]
gcode:    
     {% set RETRACT = printer["gcode_macro MACROS_VARS"].ending_length|default(0)%}
     G1 E{RETRACT*-1} F1800 

[gcode_macro CLEAR_BUFFER]
gcode:
    M400


[gcode_macro ABSOLUTE_COORDINATES]
gcode:
    G90

[gcode_macro RELATIVE_COORDINATES]
gcode:
    G91

[gcode_macro ABSOLUTE_EXTRUSION]
gcode:
    M82

[gcode_macro RELATIVE_EXTRUSION]
gcode:
    M83

[gcode_macro WAIT]
gcode:
    {% set TIME = params.TIME|default(0)|int %}
    G4 P{TIME*1000}

[delayed_gcode BACKUP_ON_BOOT]
initial_duration: 1
gcode:
        BACKUP_CFG

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro MACROS_VARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro MACROS_VARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0


[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(10) | int) * 60 %} ## minutes to seconds
    {% set HOME = params.HOME| default(0) | int %}
    {% set FANSPD = printer["gcode_macro MACROS_VARS"].circ_fan_speed|default(0)%}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_TEMP HEATER="bed" TEMP={TARGET}; 
    ;; run the fan to circulate air
    SET_FAN SPEED={FANSPD} ;Turn fan on full blast to help circulate the air
    ;; put the bed and nozzle where they're a safe distance apart
    BEDFANSFAST
    {% if HOME == 1 %}
       HOME
       PARK
    {% endif %}
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
    BEDFANSOFF
[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

    
[gcode_macro PID_HOTEND]
gcode:
  {% set TEMP = params.TEMP|default(250)|int %}
  PID_CALIBRATE HEATER=extruder TARGET={TEMP}

[gcode_macro PID_BED]
gcode:
  {% set TEMP = params.TEMP|default(80)|int %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}


[gcode_macro IS_CAL]
gcode:
  CHOME
  SHAPER_CALIBRATE

[gcode_macro SPEEDTEST]
gcode: 

    
    {% set fmin = params.FMIN|default(300)|float * 60 %}
    {% set fmax = params.FMAX|default(400)|float * 60 %}
    {% set steps = params.STEPS|default(3)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}

    {% set inset = 20.0|float %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    
    SAVE_GCODE_STATE NAME=speedtest_state
    HOME
    ABSOLUTE_COORDINATES
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if fmin == fmax %}
                    {% set feedrate = fmin %}
                {% else %}
                    {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400 # Wait for queue to empty
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                G1 F{feedrate} # set feedrate for the round
                G1 X{minX} Y{minY} # front left
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{maxX} Y{minY + (maxY-minY)/2} # mid right
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{minX} Y{minY} # front left
                G1 X{maxX} Y{maxY} # back right
                G1 X{maxX} Y{minY} # front right
                G1 X{minX} Y{maxY} # back left
            {% endfor %}
        {% endfor %}
    DISPLAYTEXT
    PARK
    RESTORE_GCODE_STATE NAME=speedtest_state    






#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                 # Set offset to 0
  led_heating
 M140 S{target_bed} 
 M104 S{target_extruder} 
  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
 # #STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
  #  #STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    HEATSOAK_CHAMBER CHAMBER_TEMP={target_chamber} 

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    #STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  #SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  #M109 S150                                             # Heat hotend to 150c
  led_white
  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  ##STATUS_LEVELING                                      # Set LEDs to leveling-mode
  Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  ##STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  #G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  #SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  #STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  #STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  #STATUS_PRINTING                                       # Set LEDs to printing-mode
  PRIME                                                # Absolute position
  LED_TOGGLE
  LED_PRINTING

  
[gcode_macro PRIME]
gcode:
  {% set x_mid = printer.toolhead.axis_maximum.x|float / 2 %}
  G0 X{x_mid - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90  

[gcode_macro PRINT_END]
gcode:
    #TOGGLE_COUNTER
    CLEAR_BUFFER                           ; wait for buffer to clear
    RESET_EXTRUDER                         ; zero the extruder
    ENDING_RETRACTION                ; retract filament
    TURN_OFF_HEATERS
    ABSOLUTE_COORDINATES                                      ; absolute positioning
    PARK_AT_PRINT_END
    SET_FAN                                
    BED_MESH_CLEAR
    DISPLAYTEXT TEXT="Print finished!"
    WLED_OFF
    BEDFANSOFF
    LED_PRINT_END
   # reset nozzle thermal expansion offset
    # {% if printer.configfile.settings.beacon is defined %}
    # _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
    # _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
    # {% endif %}
[force_move]
enable_force_move: True
# Conditional G28
[gcode_macro CHOME]
gcode:
   STATUS_HOMING
  {% if printer.toolhead.homed_axes != "xyz" %}
   HOME
  {% endif %}

[gcode_macro GET_HOMED_AXES]
gcode:
    { action_respond_info('homed axes: %s' % printer.toolhead.get('homed_axes').__repr__()) }


[gcode_macro M106]                                     
rename_existing: M106.1                        
variable_lock_flag: 0                                
gcode:                                   
    {% if not lock_flag or ('L' in params and 'S' in params) %}
        M106.1 S{params.S|default(255)|int}
    {% elif not 'L' in params %}
        {action_respond_info('"M106 %s": Ignored, fan speed is locked. Run "M106 L0" to unlock.' % rawparams)}
    {% endif %}         
    {% if 'L' in params %}
        {% set is_locked = 1 if params.L|default(0)|int else 0 %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=lock_flag VALUE={is_locked}
        {action_respond_info('"M106": Fan speed %s' % ('locked' if is_locked else 'unlocked'))}
    {% endif %}


[gcode_macro lock_fan]
gcode:   M106 S0 L1

[gcode_macro unlock_fan]
gcode:   M106 S0 L0


